import React, { useState, useCallback, useRef, useEffect } from 'react';
import { Upload, X, ChevronRight, ChevronLeft, Save, Check, AlertCircle, Edit3 } from 'lucide-react';

// ErrorView Component (unchanged)
const ErrorView = ({ error, onRetry }) => (
  <div className="min-h-screen bg-gray-50 flex justify-center items-center p-4">
    <div className="bg-white p-8 rounded-xl shadow-xl max-w-md w-full">
      <div className="flex items-center gap-3 mb-4">
        <AlertCircle className="w-8 h-8 text-red-500" />
        <h2 className="text-red-600 text-xl font-bold">Error Occurred</h2>
      </div>
      <p className="text-gray-700 mb-6">{error}</p>
      <button
        onClick={onRetry}
        className="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 
                   transition-colors duration-200 flex items-center justify-center gap-2"
      >
        <span>Try Again</span>
        <ChevronRight className="w-5 h-5" />
      </button>
    </div>
  </div>
);

// SelectionToolbar Component (unchanged)
const SelectionToolbar = ({ position, onSelect, onClose }) => {
  const toolbarRef = useRef(null);

  useEffect(() => {
    const toolbar = toolbarRef.current;
    if (toolbar) {
      const rect = toolbar.getBoundingClientRect();
      const viewportHeight = window.innerHeight;
      
      if (position.top + rect.height > viewportHeight) {
        toolbar.style.top = `${viewportHeight - rect.height - 20}px`;
      }
    }
  }, [position]);

  const categories = [
    { id: 'Main_Action', label: 'Main Action', color: 'blue' },
    { id: 'Agent', label: 'Agent', color: 'green' },
    { id: 'Method', label: 'Method', color: 'purple' },
    { id: 'Context', label: 'Context', color: 'orange' },
    { id: 'Purpose', label: 'Purpose', color: 'pink' },
    { id: 'Results', label: 'Results', color: 'indigo' }
  ];

  return (
    <div 
      ref={toolbarRef}
      className="fixed bg-white rounded-lg shadow-2xl border border-gray-200 p-4 z-50 selection-toolbar
                 transition-all duration-200 min-w-[320px]"
      style={{
        top: `${position.top - 100}px`,
        left: `${position.left + (position.width / 2)}px`,
        transform: 'translateX(-50%)'
      }}
    >
      <div className="flex justify-between items-center mb-3">
        <span className="text-sm font-medium text-gray-700">Annotate Selection As:</span>
        <button 
          onClick={onClose}
          className="text-gray-400 hover:text-gray-600 transition-colors"
        >
          <X className="w-4 h-4" />
        </button>
      </div>
      <div className="grid grid-cols-2 gap-2">
        {categories.map(({ id, label, color }) => (
          <button
            key={id}
            onClick={() => onSelect(id)}
            className={`px-4 py-2.5 text-sm rounded-lg transition-all duration-200 flex items-center gap-2
                       ${color === 'blue' ? 'bg-blue-50 hover:bg-blue-100 text-blue-700' :
                         color === 'green' ? 'bg-green-50 hover:bg-green-100 text-green-700' :
                         color === 'purple' ? 'bg-purple-50 hover:bg-purple-100 text-purple-700' :
                         color === 'orange' ? 'bg-orange-50 hover:bg-orange-100 text-orange-700' :
                         color === 'pink' ? 'bg-pink-50 hover:bg-pink-100 text-pink-700' :
                         'bg-indigo-50 hover:bg-indigo-100 text-indigo-700'}`}
          >
            <Edit3 className="w-4 h-4" />
            {label}
          </button>
        ))}
      </div>
    </div>
  );
};

// ArgumentField Component (unchanged)
const ArgumentField = ({ field, value, onDelete, colorClass }) => (
  <div className="mb-4 group relative">
    <label className="block text-sm font-bold text-gray-700 mb-2">
      {field.replace('_', ' ')}
    </label>
    <div className="relative">
      <input
        type="text"
        className={`w-full p-3 border-2 rounded-lg transition-all duration-200 ${colorClass}`}
        value={value || ''}
        readOnly
        placeholder={`Select text for ${field.toLowerCase().replace('_', ' ')}`}
      />
      {value && (
        <button
          onClick={onDelete}
          className="absolute right-3 top-1/2 -translate-y-1/2 opacity-0 group-hover:opacity-100 
                   transition-opacity duration-200 p-1 hover:bg-gray-100 rounded-full"
        >
          <X className="w-4 h-4 text-gray-400 hover:text-red-500" />
        </button>
      )}
    </div>
  </div>
);

// Main AnnotationDashboard Component
const AnnotationDashboard = () => {
  // State declarations (unchanged)
  const [jsonData, setJsonData] = useState(null);
  const [currentPaperIndex, setCurrentPaperIndex] = useState(0);
  const [currentEventIndex, setCurrentEventIndex] = useState(0);
  const [selectedText, setSelectedText] = useState(null);
  const [isFileDropActive, setIsFileDropActive] = useState(false);
  const [error, setError] = useState('');
  const [isSaving, setIsSaving] = useState(false);
  const [lastSaved, setLastSaved] = useState(null);
  const [isAbstractOpen, setIsAbstractOpen] = useState(false);
  const textRef = useRef(null);

  // Handlers and effects (unchanged)
  const handleTextSelection = () => {
    const selection = window.getSelection();
    const selectedText = selection.toString().trim();
    
    if (selectedText !== '') {
      const range = selection.getRangeAt(0);
      const rect = range.getBoundingClientRect();
      
      setSelectedText({
        text: selectedText,
        position: {
          top: rect.top + window.scrollY,
          left: rect.left + window.scrollX,
          width: rect.width
        }
      });
    } else {
      setSelectedText(null);
    }
  };

  const handleSelectionConfirm = (field) => {
    const newData = [...jsonData];
    const currentEvent = newData[currentPaperIndex].events[currentEventIndex];
    
    if (field === 'Main_Action') {
      currentEvent.Main_Action = selectedText.text;
    } else {
      if (!currentEvent.Arguments) {
        currentEvent.Arguments = {};
      }
      currentEvent.Arguments[field] = selectedText.text;
    }
    
    setJsonData(newData);
    setSelectedText(null);
  };

  // File handling functions (unchanged)
  const handleFileInput = async (event) => {
    const file = event.target.files[0];
    if (file) {
      try {
        const text = await file.text();
        const data = JSON.parse(text);
        validateAndSetData(data);
      } catch (e) {
        setError('Invalid JSON file. Please check the format.');
      }
    }
  };

  const validateAndSetData = (data) => {
    if (!Array.isArray(data)) {
      setError('Invalid format: Expected an array of papers');
      return;
    }
    
    const isValid = data.every(paper => 
      paper.paper_code && 
      Array.isArray(paper.events)
    );

    if (!isValid) {
      setError('Invalid format: Each paper must have paper_code and events array');
      return;
    }

    setJsonData(data);
    setError('');
  };

  // Auto-save functionality (unchanged)
  const saveData = async () => {
    setIsSaving(true);
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      setLastSaved(new Date());
    } catch (error) {
      console.error('Error saving:', error);
    } finally {
      setIsSaving(false);
    }
  };

  // Effect hooks (unchanged)
  useEffect(() => {
    if (!jsonData) return;
    const autoSaveInterval = setInterval(saveData, 30000);
    return () => clearInterval(autoSaveInterval);
  }, [jsonData]);

  // Get current paper reference
  const currentPaper = jsonData?.[currentPaperIndex];
  const currentEvent = currentPaper?.events[currentEventIndex];

  // Error handling
  if (error) {
    return <ErrorView error={error} onRetry={() => setError('')} />;
  }

  // File upload view (unchanged)
  if (!jsonData) {
    return (
      <div 
        className={`min-h-screen bg-gray-50 p-8 flex items-center justify-center ${
          isFileDropActive ? 'bg-blue-50' : ''
        }`}
        onDragOver={(e) => {
          e.preventDefault();
          setIsFileDropActive(true);
        }}
        onDragLeave={() => setIsFileDropActive(false)}
        onDrop={(e) => {
          e.preventDefault();
          setIsFileDropActive(false);
          const file = e.dataTransfer.files[0];
          if (file) {
            handleFileInput({ target: { files: [file] } });
          }
        }}
      >
        <div className="max-w-xl w-full">
          <div className={`border-2 border-dashed rounded-xl p-12 text-center transition-colors ${
            isFileDropActive ? 'border-blue-500 bg-blue-100' : 'border-gray-300'
          }`}>
            <Upload className="w-16 h-16 mx-auto text-gray-400 mb-4" />
            <h2 className="text-xl font-semibold mb-2">Upload Annotation File</h2>
            <p className="text-gray-500 mb-4">Drag and drop your JSON file here or click to browse</p>
            <input
              type="file"
              accept=".json"
              onChange={handleFileInput}
              className="hidden"
              id="file-upload"
            />
            <label
              htmlFor="file-upload"
              className="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg 
                       hover:bg-blue-700 cursor-pointer transition-colors"
            >
              Browse Files
            </label>
          </div>
        </div>
      </div>
    );
  }

  // Main view
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header with fixed height */}
      <header className="fixed top-0 left-0 right-0 bg-white shadow-sm z-20">
        <div className="max-w-7xl mx-auto p-4">
          <div className="flex justify-between items-center mb-2">
            <div className="flex items-center gap-4">
              <h1 className="text-xl font-bold text-gray-900">
                {currentPaper.paper_code}
              </h1>
              {lastSaved && (
                <span className="text-sm text-gray-500 flex items-center gap-1">
                  <Save className="w-4 h-4" />
                  Last saved: {new Intl.DateTimeFormat('en-US', {
                    hour: 'numeric',
                    minute: 'numeric',
                  }).format(lastSaved)}
                </span>
              )}
              {isSaving && (
                <span className="text-sm text-blue-600 flex items-center gap-1">
                  <div className="w-3 h-3 border-2 border-blue-600 border-t-transparent rounded-full animate-spin" />
                  Saving...
                </span>
              )}
            </div>
            <div className="flex items-center gap-4">
              <span className="text-sm font-medium text-gray-600">
                Paper {currentPaperIndex + 1} of {jsonData.length}
              </span>
              <span className="text-lg font-bold text-blue-600">
                Event {currentEventIndex + 1} of {currentPaper.events.length}
              </span>
            </div>
          </div>

          {/* Progress Bar */}
          <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
            <div 
              className="h-full bg-blue-600 rounded-full transition-all duration-300"
              style={{ 
                width: `${(((currentPaperIndex * currentPaper.events.length) + currentEventIndex) / 
                (jsonData.length * currentPaper.events.length)) * 100}%` 
              }}
            />
          </div>

          {/* Abstract Toggle */}
          <div className="mt-2 border-t border-gray-100 pt-2">
            <button
              onClick={() => setIsAbstractOpen(!isAbstractOpen)}
              className="flex items-center gap-2 text-blue-600 hover:text-blue-700 transition-colors"
            >
              <ChevronRight 
                className={`w-5 h-5 transform transition-transform ${isAbstractOpen ? 'rotate-90' : ''}`}
              />
              <span className="font-medium">
                {isAbstractOpen ? 'Hide Abstract' : 'Show Abstract'}
              </span>
            </button>
            {isAbstractOpen && (
              <div className="mt-2 p-4 bg-blue-50 rounded-lg">
                <p className="text-gray-700 leading-relaxed max-h-32 overflow-y-auto">
                  {currentPaper.abstract}
                </p>
              </div>
            )}
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="pt-40">
        <div className="max-w-7xl mx-auto px-4">
          <div className="grid grid-cols-12 gap-6">
            {/* Text Panel */}
            <div className="col-span-7">
              <div className="bg-white rounded-xl shadow-lg p-8">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-xl font-bold text-blue-900">
                    Event {currentEventIndex + 1}: {Object.keys(currentEvent).find(key => 
                      ['Background/Introduction', 'Methods/Approach', 'Results/Findings', 'Conclusions/Implications'].includes(key)
                    )}
                  </h2>
                  <div className="text-sm text-gray-500">
                    Select text to annotate
                  </div>
                </div>
                
                <div 
                  ref={textRef}
                  className="prose prose-lg max-w-none leading-relaxed"
                  onMouseUp={handleTextSelection}
                  style={{ fontSize: '1.125rem', lineHeight: '1.8' }}
                >
                  {currentEvent.Text}
                </div>
              </div>
            </div>

            {/* Arguments Panel */}
            <div className="col-span-5">
              <div className="bg-white rounded-xl shadow-lg p-8">
                {/* Event Summary */}
                <div className="mb-6">
                  <label className="block text-lg font-bold text-gray-900 mb-3">
                    Event Summary
                  </label>
                  <textarea
                    className="w-full p-4 border-2 border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 
                             focus:border-blue-500 transition-all duration-200 min-h-[100px]"
                    value={currentEvent[Object.keys(currentEvent).find(key => 
                      ['Background/Introduction', 'Methods/Approach', 'Results/Findings', 'Conclusions/Implications'].includes(key)
                    )] || ''}
                    onChange={(e) => {
                      const newData = [...jsonData];
                      const eventType = Object.keys(currentEvent).find(key => 
                        ['Background/Introduction', 'Methods/Approach', 'Results/Findings', 'Conclusions/Implications'].includes(key)
                      );
                      newData[currentPaperIndex].events[currentEventIndex][eventType] = e.target.value;
                      setJsonData(newData);
                    }}
                    placeholder="Enter a summary for this event..."
                  />
                </div>

                {/* Arguments Grid */}
                <div className="grid grid-cols-2 gap-4">
                  {/* Left Column */}
                  <div>
                    <ArgumentField
                      field="Main Action"
                      value={currentEvent.Main_Action}
                      onDelete={() => {
                        const newData = [...jsonData];
                        newData[currentPaperIndex].events[currentEventIndex].Main_Action = '';
                        setJsonData(newData);
                      }}
                      colorClass="border-blue-200 bg-blue-50"
                    />
                    <ArgumentField
                      field="Agent"
                      value={currentEvent.Arguments?.Agent}
                      onDelete={() => {
                        const newData = [...jsonData];
                        delete newData[currentPaperIndex].events[currentEventIndex].Arguments.Agent;
                        setJsonData(newData);
                      }}
                      colorClass="border-green-200 bg-green-50"
                    />
                    <ArgumentField
                      field="Method"
                      value={currentEvent.Arguments?.Method}
                      onDelete={() => {
                        const newData = [...jsonData];
                        delete newData[currentPaperIndex].events[currentEventIndex].Arguments.Method;
                        setJsonData(newData);
                      }}
                      colorClass="border-purple-200 bg-purple-50"
                    />
                  </div>

                  {/* Right Column */}
                  <div>
                    <ArgumentField
                      field="Purpose"
                      value={currentEvent.Arguments?.Purpose}
                      onDelete={() => {
                        const newData = [...jsonData];
                        delete newData[currentPaperIndex].events[currentEventIndex].Arguments.Purpose;
                        setJsonData(newData);
                      }}
                      colorClass="border-pink-200 bg-pink-50"
                    />
                    <ArgumentField
                      field="Results"
                      value={currentEvent.Arguments?.Results}
                      onDelete={() => {
                        const newData = [...jsonData];
                        delete newData[currentPaperIndex].events[currentEventIndex].Arguments.Results;
                        setJsonData(newData);
                      }}
                      colorClass="border-indigo-200 bg-indigo-50"
                    />
                    <ArgumentField
                      field="Context"
                      value={currentEvent.Arguments?.Context}
                      onDelete={() => {
                        const newData = [...jsonData];
                        delete newData[currentPaperIndex].events[currentEventIndex].Arguments.Context;
                        setJsonData(newData);
                      }}
                      colorClass="border-orange-200 bg-orange-50"
                    />
                  </div>
                </div>

                {/* Object Components */}
                <div className="mt-6 bg-gradient-to-r from-indigo-50 to-blue-50 rounded-xl p-6">
                  <h3 className="text-lg font-bold text-indigo-900 mb-4">Object Components</h3>
                  <div className="grid grid-cols-2 gap-4">
                    {['Base_Object', 'Base_Modifier', 'Attached_Object', 'Attached_Modifier'].map((field) => (
                      <ArgumentField
                        key={field}
                        field={field}
                        value={currentEvent.Arguments?.Object?.[field]}
                        onDelete={() => {
                          const newData = [...jsonData];
                          if (!newData[currentPaperIndex].events[currentEventIndex].Arguments.Object) {
                            newData[currentPaperIndex].events[currentEventIndex].Arguments.Object = {};
                          }
                          delete newData[currentPaperIndex].events[currentEventIndex].Arguments.Object[field];
                          setJsonData(newData);
                        }}
                        colorClass="border-indigo-100 bg-white"
                      />
                    ))}
                  </div>
                </div>

                {/* Navigation Buttons */}
                <div className="flex justify-between gap-4 mt-6">
                  <button
                    className="flex-1 py-3 px-6 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 
                             disabled:opacity-50 transition-colors duration-200 flex items-center justify-center gap-2"
                    disabled={currentEventIndex === 0}
                    onClick={() => setCurrentEventIndex(prev => prev - 1)}
                  >
                    <ChevronLeft className="w-5 h-5" />
                    <span>Previous Event</span>
                  </button>
                  <button
                    className="flex-1 py-3 px-6 bg-blue-600 text-white rounded-lg hover:bg-blue-700 
                             disabled:opacity-50 transition-colors duration-200 flex items-center justify-center gap-2"
                    disabled={currentEventIndex === currentPaper.events.length - 1}
                    onClick={() => setCurrentEventIndex(prev => prev + 1)}
                  >
                    <span>Next Event</span>
                    <ChevronRight className="w-5 h-5" />
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* Selection Toolbar */}
      {selectedText && (
        <SelectionToolbar
          position={selectedText.position}
          onSelect={handleSelectionConfirm}
          onClose={() => setSelectedText(null)}
        />
      )}

      {/* Paper Navigation */}
      {currentPaperIndex < jsonData.length - 1 && currentEventIndex === currentPaper.events.length - 1 && (
        <div className="fixed bottom-6 right-6">
          <button
            className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 
                     transition-colors duration-200 flex items-center gap-2 shadow-lg"
            onClick={() => {
              setCurrentPaperIndex(prev => prev + 1);
              setCurrentEventIndex(0);
            }}
          >
            <span>Next Paper</span>
            <ChevronRight className="w-5 h-5" />
          </button>
        </div>
      )}
    </div>
  );
};

// CSS styles for transitions and animations
const styles = `
  .selection-toolbar {
    animation: fadeIn 0.2s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px) translateX(-50%);
    }
    to {
      opacity: 1;
      transform: translateY(0) translateX(-50%);
    }
  }

  .abstract-transition {
    transition: max-height 0.3s ease-in-out;
    overflow: hidden;
  }

  /* Scrollbar styling */
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.5) transparent;
  }

  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }

  .custom-scrollbar::-webkit-scrollbar-track {
    background: transparent;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.5);
    border-radius: 3px;
  }
`;

// Add styles to document
if (typeof document !== 'undefined') {
  const styleSheet = document.createElement('style');
  styleSheet.textContent = styles;
  document.head.appendChild(styleSheet);
}



export default AnnotationDashboard;