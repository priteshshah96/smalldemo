import React, { useState, useRef, useEffect } from 'react';
import { X, ChevronRight, ChevronLeft, Edit3 } from 'lucide-react';

// Constants
const HIGHLIGHT_COLORS = {
  span1: 'bg-yellow-200',
  span2: 'bg-green-200'
};

const ARGUMENT_STRUCTURE = {
  mainAction: {
    id: 'mainAction',
    label: 'Main Action',
    description: 'Select the main action being described'
  },
  arguments: {
    agent: {
      id: 'agent',
      label: 'Agent',
      description: 'Who or what is performing the action'
    },
    object: {
      baseObject: {
        id: 'baseObject',
        label: 'Base Object',
        description: 'The primary object being discussed'
      },
      baseModifier: {
        id: 'baseModifier',
        label: 'Base Modifier',
        description: 'Modifications to the base object'
      },
      attachedObject: {
        id: 'attachedObject',
        label: 'Attached Object',
        description: 'Secondary object connected to base'
      },
      attachedModifier: {
        id: 'attachedModifier',
        label: 'Attached Modifier',
        description: 'Modifications to attached object'
      }
    },
    context: {
      id: 'context',
      label: 'Context',
      description: 'The setting or circumstances'
    },
    purpose: {
      id: 'purpose',
      label: 'Purpose',
      description: 'Why the action is being performed'
    },
    method: {
      id: 'method',
      label: 'Method',
      description: 'How the action is being performed'
    },
    results: {
      id: 'results',
      label: 'Results',
      description: 'The outcome of the action'
    },
    analysis: {
      id: 'analysis',
      label: 'Analysis',
      description: 'Critical examination of findings'
    },
    challenge: {
      id: 'challenge',
      label: 'Challenge',
      description: 'Difficulties encountered'
    },
    ethical: {
      id: 'ethical',
      label: 'Ethical',
      description: 'Ethical considerations'
    },
    implications: {
      id: 'implications',
      label: 'Implications',
      description: 'Broader impacts'
    },
    contradictions: {
      id: 'contradictions',
      label: 'Contradictions',
      description: 'Inconsistencies found'
    }
  }
};

// ArgumentButton Component
const ArgumentButton = ({ type, active, onClick, disabled }) => {
  const { label, description } = type;
  
  return (
    <button
      className={`
        w-full px-3 py-2 rounded-lg text-left transition-all duration-200 
        flex items-center gap-2 text-sm
        ${active 
          ? 'bg-blue-100 text-blue-700 border-2 border-blue-500' 
          : 'bg-gray-50 hover:bg-gray-100 text-gray-700 border border-gray-200'
        }
        ${disabled ? 'opacity-50 cursor-not-allowed' : ''}
      `}
      onClick={onClick}
      disabled={disabled}
      aria-label={`Select text for ${label}`}
      title={description}
    >
      <Edit3 className={`w-4 h-4 ${active ? 'text-blue-500' : 'text-gray-400'}`} />
      <div className="flex-1">
        <div className="font-medium">{label}</div>
        <div className="text-xs text-gray-500 truncate">{description}</div>
      </div>
    </button>
  );
};

// Main Dashboard Component
const AnnotationDashboard = () => {
  // State declarations
  const [jsonData, setJsonData] = useState(null);
  const [currentPaperIndex, setCurrentPaperIndex] = useState(0);
  const [currentEventIndex, setCurrentEventIndex] = useState(0);
  const [isAbstractOpen, setIsAbstractOpen] = useState(false);
  const [highlights, setHighlights] = useState({});
  const [activeArgument, setActiveArgument] = useState(null);
  const [currentSpan, setCurrentSpan] = useState('span1');
  
  const textRef = useRef(null);
  const abstractRef = useRef(null);

  // Handle abstract height and content padding
  useEffect(() => {
    if (isAbstractOpen && abstractRef.current) {
      const abstractHeight = abstractRef.current.offsetHeight;
      document.documentElement.style.setProperty('--abstract-height', `${abstractHeight}px`);
    } else {
      document.documentElement.style.setProperty('--abstract-height', '0px');
    }
  }, [isAbstractOpen]);

  // Handle text selection
  const handleTextSelection = () => {
    if (!activeArgument) return;

    const selection = window.getSelection();
    const selectedText = selection.toString().trim();
    
    if (selectedText) {
      const range = selection.getRangeAt(0);
      const highlightId = `highlight-${Date.now()}`;
      
      // Create highlight element
      const highlight = document.createElement('span');
      highlight.className = HIGHLIGHT_COLORS[currentSpan];
      highlight.dataset.highlightId = highlightId;
      highlight.dataset.argumentId = activeArgument.id;
      
      try {
        range.surroundContents(highlight);
        // Update highlights state
        setHighlights(prev => ({
          ...prev,
          [activeArgument.id]: [
            ...(prev[activeArgument.id] || []),
            {
              id: highlightId,
              text: selectedText,
              spanType: currentSpan
            }
          ]
        }));
        
        // Toggle span type if there's already one highlight
        if (prev[activeArgument.id]?.length === 1) {
          setCurrentSpan(prev => prev === 'span1' ? 'span2' : 'span1');
        }
      } catch (error) {
        console.error('Could not highlight selection:', error);
      }

      // Clear selection
      selection.removeAllRanges();
    }
  };

  // Handle ESC key to clear active argument
  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.key === 'Escape') {
        setActiveArgument(null);
        setCurrentSpan('span1');
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, []);

  // Get current paper and event
  const currentPaper = jsonData?.[currentPaperIndex];
  const currentEvent = currentPaper?.events[currentEventIndex];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header with Abstract */}
      <header className="fixed top-0 left-0 right-0 bg-white shadow-sm z-20">
        <div className="max-w-7xl mx-auto p-4">
          {/* Paper Info */}
          <div className="flex justify-between items-center mb-2">
            <h1 className="text-xl font-bold text-gray-900">
              {currentPaper?.paper_code}
            </h1>
            <div className="flex items-center gap-4">
              <span className="text-sm font-medium text-gray-600">
                Paper {currentPaperIndex + 1} of {jsonData?.length || 0}
              </span>
              <span className="text-lg font-bold text-blue-600">
                Event {currentEventIndex + 1} of {currentPaper?.events.length || 0}
              </span>
            </div>
          </div>

          {/* Progress Bar */}
          <div className="h-2 bg-gray-200 rounded-full overflow-hidden">
            <div 
              className="h-full bg-blue-600 rounded-full transition-all duration-300"
              style={{ 
                width: `${(((currentPaperIndex * (currentPaper?.events.length || 1)) + currentEventIndex) / 
                ((jsonData?.length || 1) * (currentPaper?.events.length || 1))) * 100}%` 
              }}
              role="progressbar"
              aria-valuenow={currentEventIndex + 1}
              aria-valuemin={1}
              aria-valuemax={currentPaper?.events.length || 1}
            />
          </div>

          {/* Abstract Toggle */}
          <div className="mt-2 border-t border-gray-100 pt-2">
            <button
              onClick={() => setIsAbstractOpen(!isAbstractOpen)}
              className="flex items-center gap-2 text-blue-600 hover:text-blue-700 transition-colors"
              aria-expanded={isAbstractOpen}
              aria-controls="abstract-panel"
            >
              <ChevronRight 
                className={`w-5 h-5 transform transition-transform ${isAbstractOpen ? 'rotate-90' : ''}`}
              />
              <span className="font-medium">
                {isAbstractOpen ? 'Hide Abstract' : 'Show Abstract'}
              </span>
            </button>
            
            {isAbstractOpen && (
              <div 
                id="abstract-panel"
                ref={abstractRef}
                className="mt-2 p-4 bg-blue-50 rounded-lg transition-all duration-300"
              >
                <p className="text-gray-700 leading-relaxed">
                  {currentPaper?.abstract}
                </p>
              </div>
            )}
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main 
        className="transition-all duration-300"
        style={{ paddingTop: `calc(8rem + var(--abstract-height, 0))` }}
      >
        <div className="max-w-7xl mx-auto px-4">
          {/* Text Area */}
          <div className="bg-white rounded-xl shadow-lg p-8 mb-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-bold text-blue-900">
                Event {currentEventIndex + 1}: {
                  Object.keys(currentEvent || {}).find(key => 
                    ['Background/Introduction', 'Methods/Approach', 'Results/Findings', 'Conclusions/Implications'].includes(key)
                  )
                }
              </h2>
              <div className="text-sm text-gray-500">
                {activeArgument 
                  ? `Selecting text for: ${activeArgument.label}` 
                  : 'Select an argument type below to begin annotation'
                }
              </div>
            </div>
            
            <div 
              ref={textRef}
              className="prose prose-lg max-w-none leading-relaxed min-h-[400px]"
              onMouseUp={handleTextSelection}
              style={{ fontSize: '1.125rem', lineHeight: '1.8' }}
            >
              {currentEvent?.Text}
            </div>
          </div>

          {/* Arguments Area */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Left Column: Argument Buttons */}
            <div className="space-y-6">
              {/* Main Action */}
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-lg font-bold text-gray-900 mb-4">Main Action</h3>
                <ArgumentButton
                  type={ARGUMENT_STRUCTURE.mainAction}
                  active={activeArgument?.id === 'mainAction'}
                  onClick={() => setActiveArgument(ARGUMENT_STRUCTURE.mainAction)}
                  disabled={false}
                />
              </div>

              {/* Primary Arguments */}
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-lg font-bold text-gray-900 mb-4">Arguments</h3>
                <div className="grid grid-cols-2 gap-4">
                  {Object.values(ARGUMENT_STRUCTURE.arguments)
                    .filter(arg => !arg.hasOwnProperty('baseObject'))
                    .map(arg => (
                      <ArgumentButton
                        key={arg.id}
                        type={arg}
                        active={activeArgument?.id === arg.id}
                        onClick={() => setActiveArgument(arg)}
                        disabled={false}
                      />
                    ))
                  }
                </div>
              </div>

              {/* Object Components */}
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-lg font-bold text-gray-900 mb-4">Object Components</h3>
                <div className="grid grid-cols-2 gap-4">
                  {Object.values(ARGUMENT_STRUCTURE.arguments.object).map(arg => (
                    <ArgumentButton
                      key={arg.id}
                      type={arg}
                      active={activeArgument?.id === arg.id}
                      onClick={() => setActiveArgument(arg)}
                      disabled={false}
                    />
                  ))}
                </div>
              </div>
            </div>

            {/* Right Column: Selected Text Display */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h3 className="text-lg font-bold text-gray-900 mb-4">Selected Text</h3>
              <div className="space-y-4">
                {Object.entries(highlights).map(([argId, spans]) => {
                  const argType = Object.values(ARGUMENT_STRUCTURE).flat().find(
                    arg => arg.id === argId
                  );
                  
                  return (
                    <div key={argId} className="bg-gray-50 rounded-lg p-4">
                      <h4 className="font-medium text-gray-900 mb-2">
                        {argType?.label}
                      </h4>
                      <div className="space-y-2">
                        {spans.map((span, index) => (
                          <div 
                            key={span.id}
                            className="flex items-start gap-2 bg-white p-3 rounded border border-gray-200"
                          >
                            <span className="text-sm text-gray-600">
                              {index + 1}.
                            </span>
                            <div className="flex-1 relative group">
                              <p className={HIGHLIGHT_COLORS[span.spanType]}>
                                {span.text}
                              </p>
                              <button
                                onClick={() => {
                                  // Remove highlight from text
                                  const element = textRef.current.querySelector(
                                    `[data-highlight-id="${span.id}"]`
                                  );
                                  if (element) {
                                    const parent = element.parentNode;
                                    parent.replaceChild(
                                      document.createTextNode(element.textContent),
                                      element
                                    );
                                  }
                                  
                                  // Remove from state
                                  setHighlights(prev => ({
                                    ...prev,
                                    [argId]: prev[argId].filter(s => s.id !== span.id)
                                  }));
                                }}
                                className="absolute -top-2 -right-2 hidden group-hover:flex 
                                         items-center justify-center w-4 h-4 bg-red-500 
                                         text-white rounded-full"
                                aria-label="Remove text span"
                              >
                                <X className="w-3 h-3" />
                              </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>

          {/* Navigation Buttons */}
          <div className="flex justify-between mt-8 mb-8">
            <button
              className="px-6 py-3 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 
                       disabled:opacity-50 transition-colors duration-200 flex items-center gap-2"
              disabled={currentEventIndex === 0}
              onClick={() => {
                setCurrentEventIndex(prev => prev - 1);
                setActiveArgument(null);
                setHighlights({});
                setCurrentSpan('span1');
              }}
              aria-label="Go to previous event"
            >
              <ChevronLeft className="w-5 h-5" />
              <span>Previous Event</span>
            </button>
            <button
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 
                       disabled:opacity-50 transition-colors duration-200 flex items-center gap-2"
              disabled={currentEventIndex === currentPaper?.events.length - 1}
              onClick={() => {
                setCurrentEventIndex(prev => prev + 1);
                setActiveArgument(null);
                setHighlights({});
                setCurrentSpan('span1');
              }}
              aria-label="Go to next event"
            >
              <span>Next Event</span>
              <ChevronRight className="w-5 h-5" />
            </button>
          </div>
        </div>
      </main>
    </div>
  );
};

const styles = `
  :root {
    --abstract-height: 0px;
  }

  .highlight-animation {
    animation: fadeIn 0.2s ease-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
`;

// Add styles to document
if (typeof document !== 'undefined') {
  const styleSheet = document.createElement('style');
  styleSheet.textContent = styles;
  document.head.appendChild(styleSheet);
}

export default AnnotationDashboard;